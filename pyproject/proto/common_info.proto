syntax = "proto2";

enum room_option
{
    half = 1; // 半自摸
    full = 2; // 全自摸
};

enum event_type_member
{
    ev_member_enter = 1; // 玩家进入房间事件
    ev_member_exit = 2; // 玩家推出房间事件
};

// 玩家状态枚举
enum member_state
{
    e_un_ready = 1; // 未准备
    e_ready = 2; // 准备状态
    e_offline = 3; // 离线状态
    e_playing = 4; // 开始游戏状态
};

enum event_type
{
    ev_gang_with_peng = 1; // 杠其他人，自己的3个牌有1个是碰回来的
    ev_gang_other = 2; // 杠其他人，自己摸了3个
    ev_gang_all = 3; // 自己摸回来4个一样的杠牌

    ev_peng = 11; // 碰
    ev_chi = 12; // 吃
    ev_bu_hua = 13; // 补花
    ev_kai_jin = 14; // 开金
    ev_mo_pai = 15; // 摸牌
    ev_qi_pai = 16; // 弃牌
    ev_pass = 17; // 过
    ev_cha_pai = 18; // 查牌

    ev_dan_you = 21; // 单游
    ev_shuang_you = 22; // 双游
    ev_san_you = 23; // 三游

    ev_fen_bing_1 = 24; // 1轮被跟
    ev_fen_bing_2 = 25; // 2轮被跟
    ev_be_peng = 26; // 被碰
    ev_be_gang = 27; // 被杠
    ev_be_gang_hu = 28; // 被杠胡
    ev_be_cha = 29; // 被查

    ev_hu_normal = 81; // 普通胡
    ev_hu_cha_hua = 82; // 查花胡
    ev_hu_qiang_gang = 83; // 抢杠胡
    ev_hu_qiang_jin = 84; // 枪金胡
    ev_hu_san_jin_dao = 85; // 三金倒
    ev_hu_si_jin_dao = 86; // 四金倒
    ev_hu_wu_jin_dao = 87; // 五金倒
    ev_hu_liu_jin_dao = 88; // 六金倒
    ev_hu_ba_xian_guo_hai = 89; // 八仙过海
    ev_hu_shi_san_yao = 90; // 十三幺
    ev_hu_qi_dui_zi = 91; // 七对子
};

message other_player_info
{
    required uint64 player_id = 1; // 玩家id
    required bytes  player_name = 2; // 玩家名字
    required bytes  wechat_info = 3; // 微信信息
    required bytes  ip = 4; // ip
    required uint32 pos = 5; // 位置
    optional member_state state = 6; // 玩家状态
};

// 房间玩法配置
message game_cfg
{
    required uint32         member_num = 1; // 开局人数
    required uint32         multi = 2; // 游金倍数
    required uint32         total_start_game_num = 3; // 总场数
    required uint32         avg = 4; // 是否均摊
    required room_option    opt = 5; // 玩法选项
};

// 玩家牌堆信息
// 需要客户端进行缓存，如果牌堆是空的，用回缓存的数据
message game_card_list
{
    required uint32 pos = 1; // 位置
    required uint32 card_num = 2; // 手上的牌数量
    repeated uint32 list_card_have = 3; // 手上的牌(可能没有)
    repeated uint32 list_card_hist = 4; // 打出去的牌堆
    repeated uint32 list_card_show = 5; // 碰、杠、事件的牌堆
};

// 同步房间信息，协议号 20014
message syn_game_info
{
    optional bool               proto_id_20014 = 99;
    required uint32             room_id = 1; // 房间id
    optional game_cfg           cfg = 2; // 玩法配置
    required uint32             cur_game_num = 3; // 当前场数
    required uint32             cur_round = 4; // 当前局数
    required uint32             cur_turn = 5; // 当前第几轮
    required uint32             remain_card_num = 6; //剩余牌的数量
    required uint32             master_id = 7; // 庄家
    repeated uint32             list_gold_card = 8; // 金牌
    repeated game_card_list     card_info = 9; // 各个位置的牌堆信息
    repeated other_player_info  list_members = 10;  // 房间其他成员
    required uint32             opt_pos = 11; // 当前轮到哪一个位置的玩家操作
    required uint32             pos_owner = 12; // 自己的位置
};

// 通知客户端触发事件, 协议号20013
// 碰、杠、补花、查花、单双三游、胡事件 事件参数就是牌 例子 "101"
// 被跟 事件参数没有，只有触发对象
// 被碰、被杠、被杠胡、被查 等通知类操作的 ev_target 表示被碰的对象、ev_target_src是操作对象
message on_touch_event
{
    optional bool       proto_id_20013 = 99;
    required event_type ev_type = 1; // 事件类型
    required uint64     ev_target = 3; // 事件对象
    required bytes      ev_data = 4; // 事件参数
    optional uint64     ev_target_src = 5; // 操作对象(产生被碰、杠等事件)
};

// 通知客户端触发玩家进入/离开事件, 分配协议号 20019
message on_touch_event_member
{
    optional bool proto_id_20019 = 99;
    required event_type_member ev_type = 1; // 触发的事件类型
    repeated other_player_info list_member = 2; // 玩家列表信息
}

message card_serial
{
    required uint64 player_id = 1; // 玩家id
    repeated uint32 list_card_info = 2; // 玩家牌序
    required uint32 score = 3; // 积分
};


// 玩法结果, 分配协议号 20012
message syn_game_ret
{
    optional bool               proto_id_20012 = 99;
    required uint32             room_id = 1;
    repeated other_player_info  list_member = 2;
    repeated card_serial        list_car_serial = 3;
};

// 公告/提示 消息同步, 分配协议号 20018
message notic_msg
{
    optional bool proto_id_20018 = 99;
    required uint32 msg_id = 1;
    optional bytes msg_content = 2; //公告消息内容
};

message heart_beat_req
{
    optional bool proto_id_10000 = 99;
};

// heart beat
message heart_beat_rsp
{
    optional bool   proto_id_20000 = 99;
    required uint64 next_heart_beat_time = 1; // 下一次发送心跳的时间
};
